package actions

import (
	"encoding/xml"
	"fmt"
	"io/ioutil"
	"net/http"
	"oss_inventory/models"
	"strings"
	"unicode"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/gobuffalo/x/responder"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Bom)
// DB Table: Plural (boms)
// Resource: Plural (Boms)
// Path: Plural (/boms)
// View Template Folder: Plural (/templates/boms/)

// BomsResource is the resource for the Bom model
type BomsResource struct {
	buffalo.Resource
}

// List gets all Boms. This function is mapped to the path
// GET /boms
func (v BomsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	boms := &models.Boms{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Boms from the DB
	if err := q.All(boms); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// Add the paginator to the context so it can be used in the template.
		c.Set("pagination", q.Paginator)

		c.Set("boms", boms)
		return c.Render(http.StatusOK, r.HTML("/boms/index.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(boms))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(boms))
	}).Respond(c)
}

// Show gets the data for one Bom. This function is mapped to
// the path GET /boms/{bom_id}
func (v BomsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Bom
	bom := &models.Bom{}

	// To find the Bom the parameter bom_id is used.
	if err := tx.Find(bom, c.Param("bom_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		c.Set("bom", bom)

		return c.Render(http.StatusOK, r.HTML("/boms/show.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(bom))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(bom))
	}).Respond(c)
}

// New renders the form for creating a new Bom.
// This function is mapped to the path GET /boms/new
func (v BomsResource) New(c buffalo.Context) error {
	c.Set("bom", &models.Bom{})

	return c.Render(http.StatusOK, r.HTML("/boms/new.plush.html"))
}

// Create adds a Bom to the DB. This function is mapped to the
// path POST /boms
func (v BomsResource) Create(c buffalo.Context) error {
	// Allocate an empty Bom
	bom := &models.Bom{}

	// Bind bom to the html form elements
	if err := c.Bind(bom); err != nil {
		return err
	}

	f, err := c.File("Cyclonedx")
	xmlData, err := ioutil.ReadAll(f)
	if err != nil {
		return err
	}

	xmlData = []byte(strings.Map(stripInvalidXML, string(xmlData)))
	if err = xml.Unmarshal(xmlData, bom); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	fmt.Println("----------")
	fmt.Println(bom.String())
	fmt.Println("----------")

	// Validate the data from the html form
	verrs, err := tx.Eager().ValidateAndCreate(bom)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the new.html template that the user can
			// correct the input.
			c.Set("bom", bom)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("/boms/new.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "bom.created.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/boms/%v", bom.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.JSON(bom))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.XML(bom))
	}).Respond(c)
}

// Edit renders a edit form for a Bom. This function is
// mapped to the path GET /boms/{bom_id}/edit
func (v BomsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Bom
	bom := &models.Bom{}

	if err := tx.Find(bom, c.Param("bom_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	c.Set("bom", bom)
	return c.Render(http.StatusOK, r.HTML("/boms/edit.plush.html"))
}

// Update changes a Bom in the DB. This function is mapped to
// the path PUT /boms/{bom_id}
func (v BomsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Bom
	bom := &models.Bom{}

	if err := tx.Find(bom, c.Param("bom_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind Bom to the html form elements
	if err := c.Bind(bom); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(bom)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the edit.html template that the user can
			// correct the input.
			c.Set("bom", bom)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("/boms/edit.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "bom.updated.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/boms/%v", bom.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(bom))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(bom))
	}).Respond(c)
}

// Destroy deletes a Bom from the DB. This function is mapped
// to the path DELETE /boms/{bom_id}
func (v BomsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Bom
	bom := &models.Bom{}

	// To find the Bom the parameter bom_id is used.
	if err := tx.Find(bom, c.Param("bom_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(bom); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a flash message
		c.Flash().Add("success", T.Translate(c, "bom.destroyed.success"))

		// Redirect to the index page
		return c.Redirect(http.StatusSeeOther, "/boms")
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(bom))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(bom))
	}).Respond(c)
}

// stripInvalidXML removes invalid xml characters
func stripInvalidXML(r rune) rune {
	if unicode.IsPrint(r) {
		return r
	}
	return -1
}
